BONUS CHALLENGE FORM
--------------------

For each bonus challenge you have implemented, please replace the sentence "We are not entitled to this bonus."
with a short description of:

1. How it was implemented in your code
2. Where it was used (in which class methods).
3. How you tested that it is working correctly.

--------------------

1. Fully supporting all configuration fields and avoiding the use of magic numbers


1. This was implemented by using the configuration fields instead of numerical values. These are used wherever configuration fields are referenced.
2. This implementation is used in Dealer, Player and table class.
3. we used logger prints in order to check the maintenance of those configuration fields.


--------------------

2. Terminating all threads (that you created) gracefully and in reverse order to the order they were created in.


1.	This was implemented by ensuring that threads are properly shut down using interrupt.
	we used join in "terminate" functions in dealer class and player class to ensure that threads are given the opportunity to complete any ongoing tasks before termination.
	we terminated the threads in the reverse order they were created in. 
2.	This implementation is used in Dealer and Player class.
3.	we used logger prints in order to check the order of theards creation and termination.


--------------------

3. Handling the config.turnTimeoutMillis value as follows:
config.turnTimeoutMillis < 0: display nothing.
config.turnTimeoutMillis = 0: display a timer since the last action (reshuffle or set collected).
Note: in modes without a countdown timer the dealer must ensure there is always at least one legal set on the table.

We are not entitled to this bonus.


--------------------

4. Making sure that the threads do not wake up unless some actual job needs to be done (e.g., a value needs to be
changed on the display, key input needs to be handled, etc.) and the only threads created by you are:
1 thread per player + 1 additional thread for non-human players.

a.	This was implemented by properly managing thread synchronization and blocking mechanisms to prevent threads from waking up unnecessarily. 
	Threads creation are as follow: one thread per player and one additional thread for ai players.
	All threads remain waiting until there is work to be done such as place tokens, remove token and etc and they are notifyfied.
b.	This implementation is used in Dealer and Player class using synchronized, wait and notifyall. additionaly we didnt add any other threads then asked.
c.	To test this we used logger prints to verify that threads remain blocked when there is no work to be done and that they wake up appropriately when needed.
